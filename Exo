using Constellation;
using Constellation.Package;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Exo.PushBullet.MessageCallbacks;

namespace Exo
{
    public class Program : PackageBase
    {
        static void Main(string[] args)
        {
            PackageHost.Start<Program>(args);
        }

        public override void OnStart()
        {
            PackageHost.WriteInfo("Package starting - IsRunning : {0} - IsConnected : {1}", PackageHost.IsRunning, PackageHost.IsConnected);



            int seuil = PackageHost.GetSettingValue<int>("seuil");
            PackageHost.WriteInfo($"seuil de tolérance processeur à {seuil}%");

            bool k = false; // initialisation en état processeur faible
            PackageHost.SubscribeStateObjects(sentinel: "PC-EMERIC", package: "HWMonitor");
            PackageHost.StateObjectUpdated += (s, e) =>
            {
                if (e.StateObject.Name == "/intelcpu/0/load/0")
                {
                    Console.WriteLine("utilisation du processeur à {0}%", e.StateObject.DynamicValue.Value);
                    if (!k && e.StateObject.DynamicValue.Value > seuil)
                    {
                        PackageHost.WriteWarn("Attention, utilisation élévée du processeur");
                        k = !k;
                        MyConstellation.Packages.Pushbullet.CreatePushBulletScope().SendPush(new SendPushRequest
                        {
                            Message = $"Utilisation processeur {e.StateObject.DynamicValue.Value} supérieure au seuil de {seuil}",
                            Title = $"Message from {e.StateObject.SentinelName}"
                        });
                    }
                    else if (k && e.StateObject.DynamicValue.Value < seuil)
                    {
                        PackageHost.WriteWarn("Retour à une utilisation normale du processeur");
                        k = !k;
                    }
                }
            };

        }
    }
}
